# Use version 2.1 of the CircleCI pipeline process engine
version: 2.1

commands:
  # Reusable command for destroying cloudformation stack (ROllback example)
  destroy_environment: 
    steps: 
      - run: 
          name: Destroy environment 
          when: on_fail 
          command: |
            aws cloudformation delete-stack --stack-name prod-stack-${CIRCLE_WORKFLOW_ID:0:7}
jobs: 
  create_infrastructure: 
    docker: 
      - image: amazon/aws-cli 

    steps: 
      - checkout 
      - run: 
          name: Create Cloudformation Stack 
          command: | 
            aws cloudformation create-stack \
            --stack-name prod-stack-${CIRCLE_WORKFLOW_ID:0:7} \
            --template-body file://cloudformation/ec2-template.yml \
            --parameters file://cloudformation/ec2-parameters.json

      # - run: 
      #     name: Fetch EC2 instance public IP address 
      #     command: | 
      #       aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=AlxModule4" --output text

  # Configure Infrastructure using Ansible 
  configure_infrastructure: 
    docker: 
      - image: python:3.7-alpine3.11
    steps: 
      - checkout  #checkout the repo to the CircleCI container
      - add_ssh_keys:
          fingerprints: ["42:66:02:34:cd:b4:5d:90:3b:a2:1d:d6:78:09:a5:84"]
      # Install Ansible
      - run: 
          name: Dump 
          command: | 
            ls ~/.ssh
            cat ~/.ssh/id_rsa_42660234cdb45d903ba21dd67809a584
      - run: 
          name: Install Ansible 
          command: | 
            apk add --update ansible

      # Run the playbook to configure the node server on the EC2 instance
      - run: 
          name: Run Playbook and Configure Server 
          command: | 
            ansible-playbook -i ./ansible/inventory.txt --key-file ~/.ssh/id_rsa_42660234cdb45d903ba21dd67809a584 ./ansible/main.yml 

  # Smoke test 
  smoke_test: 
    docker: 
      - image: alpine:latest 
    steps: 
      - run: apk add --update curl 
      - run: 
          name: smoke test on a dummy webpage 
          command: | 
            URL="https://github.com"   
            if curl -s --head ${URL}
            then 
              return 0 
            else 
              return 1
              fi
      - run: 
          name: smoke test failure handler 
          command: | 
            echo "Smoke Test Failed."
          when: on_fail

  # Smoke test (for the Rollback example)
  smoke_test_rollback: 
    docker: 
      - image: alpine:latest 
    steps: 
      - checkout
      - run: 
          name: Simulate an error 
          command: return 1

      - destroy_environment

workflows:
  my_workflow: 
    jobs: 
      # - create_infrastructure
      # - configure_infrastructure
      - create_infrastructure 
      - smoke_test_rollback

