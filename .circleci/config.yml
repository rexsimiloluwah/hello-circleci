# Use version 2.1 of the CircleCI pipeline process engine
version: 2.1

commands:
  # Reusable command for destroying cloudformation stack (ROllback example)
  destroy_environment: 
    steps: 
      - run: 
          name: Destroy environment 
          when: on_fail 
          command: |
            aws cloudformation delete-stack --stack-name prod-stack-${CIRCLE_WORKFLOW_ID:0:7}
jobs: 
  create_infrastructure: 
    docker: 
      - image: amazon/aws-cli 

    steps: 
      - checkout 
      - run: 
          name: Create Cloudformation Stack 
          command: | 
            aws cloudformation create-stack \
            --stack-name prod-stack-${CIRCLE_WORKFLOW_ID:0:7} \
            --template-body file://cloudformation/ec2-template.yml \
            --parameters file://cloudformation/ec2-parameters.json

      # - run: 
      #     name: Fetch EC2 instance public IP address 
      #     command: | 
      #       aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=AlxModule4" --output text

  # Configure Infrastructure using Ansible 
  configure_infrastructure: 
    docker: 
      - image: python:3.7-alpine3.11
    steps: 
      - checkout  #checkout the repo to the CircleCI container
      - add_ssh_keys:
          fingerprints: ["42:66:02:34:cd:b4:5d:90:3b:a2:1d:d6:78:09:a5:84"]
      # Install Ansible
      - run: 
          name: Dump 
          command: | 
            ls ~/.ssh
            cat ~/.ssh/id_rsa_42660234cdb45d903ba21dd67809a584
      - run: 
          name: Install Ansible 
          command: | 
            apk add --update ansible

      # Run the playbook to configure the node server on the EC2 instance
      - run: 
          name: Run Playbook and Configure Server 
          command: | 
            ansible-playbook -i ./ansible/inventory.txt --key-file ~/.ssh/id_rsa_42660234cdb45d903ba21dd67809a584 ./ansible/main.yml 

  # Smoke test 
  smoke_test: 
    docker: 
      - image: alpine:latest 
    steps: 
      - run: apk add --update curl 
      - run: 
          name: smoke test on a dummy webpage 
          command: | 
            URL="https://github.com"   
            if curl -s --head ${URL}
            then 
              return 0 
            else 
              return 1
              fi
      - run: 
          name: smoke test failure handler 
          command: | 
            echo "Smoke Test Failed."
          when: on_fail

  # Smoke test (for the Rollback example)
  smoke_test_rollback: 
    docker: 
      - image: alpine:latest 
    steps: 
      - checkout
      - run: 
          name: Simulate an error 
          command: return 1

      - destroy_environment

  # Deploy an S3 bucket 
  create_and_deploy_frontend: 
    docker: 
      - image: amazon/aws-cli 
    steps:
      - checkout 
      - run: 
          name: Deploy an S3 bucket - from the Cloudformation stack
          command: >
            aws cloudformation create-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} --template-body file://cloudformation/create-s3-bucket-template.yml --parameters ParameterKey=MyBucketName,ParameterValue=mybucket-4227-${CIRCLE_WORKFLOW_ID:0:7}
      - run: sleep 20
      - run: 
          name: Upload the contents of the `s3-files` folder 
          command: | 
            echo mybucket-4227-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 sync ./s3-files s3://mybucket-4227-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # Fetch an save the PipelineID (bucket ID) from the last release (from cloudformation exports)
  get_last_deployment_id: 
    docker: 
      - image: amazon/aws-cli 
    
    steps: 
      - checkout 
      - run: yum install -y tar gzip 
      - run: 
          name: Fetch and save the old pipeline ID 
          command: | 
            aws cloudformation list-exports \
              --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/pipelineid.txt 

      - run: cat ~/pipelineid.txt

      # Persist the pipelineid.txt file to workspace
      - persist_to_workspace:
          root: ~/
          paths:
            - pipelineid.txt

  # Execute the cloudformation template that will modify the existing cloudfront distribution 
  promote_to_production: 
    docker: 
      - image: amazon/aws-cli
    steps: 
      - checkout 
      - run: 
          name: Create CloudFront Distribution 
          command: >
            aws cloudformation create-stack --stack-name production-distro-main --template-body file://cloudformation/create-cloudfront-template.yml --parameters ParameterKey=PipelineID,ParameterValue=mybucket-4227-${CIRCLE_WORKFLOW_ID:0:7}

  # Destroy the previous production version's S3 bucket and cloudformation stack 
  clean_up_old_frontend: 
    docker: 
      - image: amazon/aws-cli 
    steps: 
      - checkout 
      - run: yum install -y tar gzip 
      - attach_workspace:
          at: ~/
      - run: 
          name: Destroy the previous S3 bucket
          command: | 
            export OldPipelineID=$(cat ~/pipelineid.txt)
            aws s3 rm "s3://${OldPipelineID}" --recursive 
      - run: 
          name: Destroy the previous Cloudfront distro 
          command: | 
            aws cloudformation delete-stack --stack-name production-distro-v2

workflows:
  my_workflow: 
    jobs: 
      # - create_infrastructure
      # - configure_infrastructure
      # - create_infrastructure 
      # - smoke_test_rollback:
      #     requires:
      #       - create_infrastructure
      - create_and_deploy_frontend
      - promote_to_production:
          requires:
            - create_and_deploy_frontend
      - get_last_deployment_id
      - clean_up_old_frontend:
          requires:
            - get_last_deployment_id 
            - promote_to_production


